<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Product Listing</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
    }
    #product-container {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 20px;
    }
    .product-card {
      border: 1px solid #ddd;
      border-radius: 10px;
      padding: 15px;
      text-align: center;
      box-shadow: 2px 2px 8px rgba(0,0,0,0.1);
    }
    .product-card img {
      max-width: 100%;
      height: 150px;
      object-fit: contain;
    }
    .error {
      color: red;
      font-size: 18px;
      font-weight: bold;
    }
    .total {
      margin-top: 20px;
      font-size: 20px;
      font-weight: bold;
    }
  </style>
</head>
<body>
  <h1>Product Listing</h1>
  <div id="product-container"></div>
  <p id="error-message" class="error"></p>
  <p id="total-price" class="total"></p>

  <script>
    const productContainer = document.getElementById("product-container");
    const errorMessage = document.getElementById("error-message");
    const totalPriceEl = document.getElementById("total-price");

    // Fetch products using async/await with try-catch for error handling
    async function fetchProducts() {
      try {
        const response = await fetch("https://fakestoreapi.com/products");
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }
        const products = await response.json();

        // Display products in console
        console.log("Fetched Products:", products);

        // Render products dynamically
        products.forEach(product => {
          const card = document.createElement("div");
          card.classList.add("product-card");

          card.innerHTML = `
            <img src="${product.image}" alt="${product.title}">
            <h3>${product.title}</h3>
            <p>Price: $${product.price}</p>
            <button>View Details</button>
          `;
          productContainer.appendChild(card);
        });

        // Calculate total price using reduce
        const totalPrice = products.reduce((sum, product) => sum + product.price, 0);
        totalPriceEl.textContent = `Total Price of All Products: $${totalPrice.toFixed(2)}`;

      } catch (error) {
        console.error("Error fetching products:", error);
        errorMessage.textContent = "Failed to fetch products. Please try again later.";
      }
    }

    fetchProducts();
  </script>
</body>
</html>
