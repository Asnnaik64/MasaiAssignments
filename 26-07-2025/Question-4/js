const taskList = document.getElementById('taskList');
const API_URL = 'https://mockapi.io/tasks'; 

function fetchTasks() {
  taskList.innerHTML = 'Loading...';
  fetch(API_URL)
    .then(res => res.json())
    .then(data => {
      taskList.innerHTML = '';
      data.forEach(task => renderTask(task));
    })
    .catch(() => {
      taskList.innerHTML = 'Failed to load tasks.';
    });
}

function renderTask(task) {
  const li = document.createElement('li');
  li.dataset.id = task.id;

  const title = document.createElement('span');
  title.className = 'task-title';
  title.textContent = task.title;

  const status = document.createElement('span');
  status.className = 'task-status';
  status.textContent = `(${task.status})`;

  const actions = document.createElement('div');
  actions.className = 'task-actions';

  const editBtn = document.createElement('button');
  editBtn.textContent = 'Edit';
  editBtn.onclick = () => showEditForm(task, li);

  const deleteBtn = document.createElement('button');
  deleteBtn.textContent = 'Delete';
  deleteBtn.onclick = () => deleteTask(task.id, li);

  actions.append(editBtn, deleteBtn);
  li.append(title, status, actions);
  taskList.appendChild(li);
}

function showEditForm(task, li) {
  li.innerHTML = '';

  const form = document.createElement('form');
  form.className = 'edit-form';

  const input = document.createElement('input');
  input.value = task.title;

  const select = document.createElement('select');
  const statuses = ['Pending', 'Completed'];
  statuses.forEach(stat => {
    const option = document.createElement('option');
    option.value = stat;
    option.text = stat;
    if (task.status === stat) option.selected = true;
    select.appendChild(option);
  });

  const saveBtn = document.createElement('button');
  saveBtn.textContent = 'Save';

  form.appendChild(input);
  form.appendChild(select);
  form.appendChild(saveBtn);

  form.onsubmit = (e) => {
    e.preventDefault();
    updateTask(task.id, input.value.trim(), select.value, li);
  };

  li.appendChild(form);
}

function updateTask(id, newTitle, newStatus, li) {
  if (!newTitle) {
    alert("Title cannot be empty.");
    return;
  }

  fetch(`${API_URL}/${id}`, {
    method: 'PATCH',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ title: newTitle, status: newStatus })
  })
    .then(res => res.json())
    .then(updatedTask => {
      li.innerHTML = '';
      renderTask(updatedTask);
    })
    .catch(() => {
      alert("Failed to update task.");
    });
}

function deleteTask(id, li) {
  const confirmDelete = confirm("Are you sure you want to delete this task?");
  if (!confirmDelete) return;

  fetch(`${API_URL}/${id}`, {
    method: 'DELETE'
  })
    .then(res => {
      if (res.ok) {
        li.remove();
      } else {
        throw new Error();
      }
    })
    .catch(() => {
      alert("Failed to delete task.");
    });
}

fetchTasks();
