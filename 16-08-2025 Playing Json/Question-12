// Q: 12
// Title:
// L1 - Implementing Multiple Custom Methods for Array Operations

// Problem Statement:
// Create a program that defines the following custom methods:

// filterEvenNumbers(arr): This method takes an array of numbers and returns a new array with only the even numbers using filter.
// sumOfArray(arr): This method calculates and returns the sum of all elements in an array using reduce.
// sortAndConcat(arr1, arr2): This method takes two arrays of numbers, sorts each array in ascending order using sort, and then concatenates them into one array using concat. Return the sorted and concatenated array.
// Your program should:

// Take two input arrays of numbers.
// Use the custom methods to filter, sum, sort, and concatenate the arrays.
// Output the results of each operation.

function filterEvenNumbers(arr) {
    return arr.filter(function(num) {
        return num % 2 === 0;
    });
}

function sumOfArray(arr) {
    return arr.reduce(function(acc, val) {
        return acc + val;
    }, 0);
}

function sortAndConcat(arr1, arr2) {
    let sorted1 = arr1.slice().sort(function(a, b) {
        return a - b;
    });
    let sorted2 = arr2.slice().sort(function(a, b) {
        return a - b;
    });
    return sorted1.concat(sorted2);
}

// Example input arrays
let array1 = [5, 12, 7, 20, 3];
let array2 = [8, 1, 15, 6, 2];

let even1 = filterEvenNumbers(array1);
let even2 = filterEvenNumbers(array2);

let sum1 = sumOfArray(array1);
let sum2 = sumOfArray(array2);

let combinedSortedArray = sortAndConcat(array1, array2);

// Output the results
console.log("Even numbers from array1:", even1);
console.log("Even numbers from array2:", even2);

console.log("Sum of array1:", sum1);
console.log("Sum of array2:", sum2);

console.log("Sorted and concatenated array:", combinedSortedArray);
